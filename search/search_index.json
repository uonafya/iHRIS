{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"iHRIS Documentation Welcome to the iHRIS technical documentation. There are two manuals. Choose the one based on your needs: Developer : This manual covers details for building new features and customizing iHRIS. Sysadmin : This manual shows how to install iHRIS on servers and how to configure it.","title":"iHRIS Documentation"},{"location":"#ihris-documentation","text":"Welcome to the iHRIS technical documentation. There are two manuals. Choose the one based on your needs: Developer : This manual covers details for building new features and customizing iHRIS. Sysadmin : This manual shows how to install iHRIS on servers and how to configure it.","title":"iHRIS Documentation"},{"location":"admin/config/","text":"Configuration options Configuration will have base information in config/baseConfig.js. This should only need to have the FHIR server information and the public keys that are accepted by this server. Configuration names should all be lower case to allow for overriding from the ENV. { \"resourceType\" : \"Parameters\" , \"parameter\" : [ { \"name\" : \"fhir:base\" , \"valueString\" : \"http://localhost:8080/hapi/fhir/\" }, { \"name\" : \"keys\" , \"part\" : [ { \"name\" : \"ihris\" , \"valueString\" : \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdeFrJr76IQ+SYAoAIw8crZKNW\\nir2re7Z7Iu+XzeYYop5+36Ux6uEQKSXo7s1xY2ou9nCkVAddZ1qehBo0e2MCtk62\\nmQJbBT18fiZ3veQPvb0LC/9aFl64RuOguPrCZC+sbZLegQ6Wwf96UWyqmR49gaHO\\nEdXwdFdSVyBGyS7dmwIDAQAB\\n-----END PUBLIC KEY-----\" } ] } ] } Additional configuration Additional configuration details should be loaded from signed Parameters on the FHIR server. Any config can also be set from the command line when starting or from the ENV. ENV variables to be loaded must start with IHRIS_ which will be stripped off. __ is used as a separator in environment variables. Command line: --fhir:base http://locahost:8080/hapi/fhir Environment: IHRIS_FHIR__BASE=http://locahost:8080/hapi/fhir Config options Allowed in local config fhir:base (default: http://localhost:8080/hapi/fhir/) fhir:username fhir:password security:disabled (when set to true the no signature checks are done on remote config or modules) config name = id of config Parameters resource keys name = public key string redis:url (default: local server) elasticsearch:base (default: http://localhost:9200) elasticsearch:username elasticsearch:password elasticsearch:max_compilation_rate (default: \"10000/1m\") reports:refresh time between recaching reports (in ms) (default: 900000) Allowed in local or remote express:limit = max upload file size (defaults to \"50mb\") user:loggedout = id of logged out user resource (default: ihris-user-loggedout) auth:google:clientId auth:google:clientSecret modules (These are for express endpoint modules) [name] = id of Library resource site title = \"title\" (default: Manage) site = \"site\" logo = \"logo image\" (default: iHRIS5Logo.png) auth - List of authorization options [name] = The name of the config (e.g. google or local) type = post | get (how the authorization is submitted, with post will create a pop up form) link = link to get or post btn image = image for the button text = Alt text for the button nav active = the name of the menu to make active by default home = url of Vue view to display for the home page menu [name] text = Text to display order = number for sorting icon = Icon to display with this menu item menu (sub menu for this section) [name] text = Text to display url = URL for this entry url = URL for this top level menu with no children footer links [name] = The name of the link (e.g. about or ihris) text = Text to display to = vue route (e.g. /static/page-about href = external link defaults components [type] (e.g. date-time) minValue[x] (e.g. minValueDateTime) = \"value\" maxValue[x] (e.g. maxValueDateTime) = \"value\" calendar = \"Ethiopian\" fields [field def] (e.g. PractitionerRole.location) type = \"type\" (e.g. \"month\", \"year\", \"password\", \"tree\") initialValue = \"resource/id\" (e.g. Location/TF) readOnlyIfSet = bool user_filter resource = \"resource\" (e.g. PractitionerRole) default is from field_def regex = \"regexp\" (e.g. \"related-location=(.+)\") replace = \"replace\" (e.g. \"$1\") shortname [Resource] fhirpath (single fhirpath for displaying for this resource) format (string for util.format()) order = \"[field],[field]\" (comma delimited list of named paths) paths [field] fhirpath join (string to join on, default: \" \") workflow processor [name] library = id of library resource file = filename of module questionnaire [name] url = canonical URL of the questionnaire processor = [processor] (name of the processor) (default is same name as questionnaire) Resources used for configuration Page resource work in progress The page resource can have search fields to display, filters available, the structure definition, and the display order of fields. Complex field order can be changed within the complex field, but not across the whole resource. E.g. name.use, name.family, name.given, but you can't add gender between name.use and name.family. filter can include the label in the value. include any modifier as well. These must be the FHIR search parameters available for the resource. Name|name:contains","title":"Configuration options"},{"location":"admin/config/#configuration-options","text":"Configuration will have base information in config/baseConfig.js. This should only need to have the FHIR server information and the public keys that are accepted by this server. Configuration names should all be lower case to allow for overriding from the ENV. { \"resourceType\" : \"Parameters\" , \"parameter\" : [ { \"name\" : \"fhir:base\" , \"valueString\" : \"http://localhost:8080/hapi/fhir/\" }, { \"name\" : \"keys\" , \"part\" : [ { \"name\" : \"ihris\" , \"valueString\" : \"-----BEGIN PUBLIC KEY-----\\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDdeFrJr76IQ+SYAoAIw8crZKNW\\nir2re7Z7Iu+XzeYYop5+36Ux6uEQKSXo7s1xY2ou9nCkVAddZ1qehBo0e2MCtk62\\nmQJbBT18fiZ3veQPvb0LC/9aFl64RuOguPrCZC+sbZLegQ6Wwf96UWyqmR49gaHO\\nEdXwdFdSVyBGyS7dmwIDAQAB\\n-----END PUBLIC KEY-----\" } ] } ] }","title":"Configuration options"},{"location":"admin/config/#additional-configuration","text":"Additional configuration details should be loaded from signed Parameters on the FHIR server. Any config can also be set from the command line when starting or from the ENV. ENV variables to be loaded must start with IHRIS_ which will be stripped off. __ is used as a separator in environment variables. Command line: --fhir:base http://locahost:8080/hapi/fhir Environment: IHRIS_FHIR__BASE=http://locahost:8080/hapi/fhir","title":"Additional configuration"},{"location":"admin/config/#config-options","text":"","title":"Config options"},{"location":"admin/config/#allowed-in-local-config","text":"fhir:base (default: http://localhost:8080/hapi/fhir/) fhir:username fhir:password security:disabled (when set to true the no signature checks are done on remote config or modules) config name = id of config Parameters resource keys name = public key string redis:url (default: local server) elasticsearch:base (default: http://localhost:9200) elasticsearch:username elasticsearch:password elasticsearch:max_compilation_rate (default: \"10000/1m\") reports:refresh time between recaching reports (in ms) (default: 900000)","title":"Allowed in local config"},{"location":"admin/config/#allowed-in-local-or-remote","text":"express:limit = max upload file size (defaults to \"50mb\") user:loggedout = id of logged out user resource (default: ihris-user-loggedout) auth:google:clientId auth:google:clientSecret modules (These are for express endpoint modules) [name] = id of Library resource site title = \"title\" (default: Manage) site = \"site\" logo = \"logo image\" (default: iHRIS5Logo.png) auth - List of authorization options [name] = The name of the config (e.g. google or local) type = post | get (how the authorization is submitted, with post will create a pop up form) link = link to get or post btn image = image for the button text = Alt text for the button nav active = the name of the menu to make active by default home = url of Vue view to display for the home page menu [name] text = Text to display order = number for sorting icon = Icon to display with this menu item menu (sub menu for this section) [name] text = Text to display url = URL for this entry url = URL for this top level menu with no children footer links [name] = The name of the link (e.g. about or ihris) text = Text to display to = vue route (e.g. /static/page-about href = external link defaults components [type] (e.g. date-time) minValue[x] (e.g. minValueDateTime) = \"value\" maxValue[x] (e.g. maxValueDateTime) = \"value\" calendar = \"Ethiopian\" fields [field def] (e.g. PractitionerRole.location) type = \"type\" (e.g. \"month\", \"year\", \"password\", \"tree\") initialValue = \"resource/id\" (e.g. Location/TF) readOnlyIfSet = bool user_filter resource = \"resource\" (e.g. PractitionerRole) default is from field_def regex = \"regexp\" (e.g. \"related-location=(.+)\") replace = \"replace\" (e.g. \"$1\") shortname [Resource] fhirpath (single fhirpath for displaying for this resource) format (string for util.format()) order = \"[field],[field]\" (comma delimited list of named paths) paths [field] fhirpath join (string to join on, default: \" \") workflow processor [name] library = id of library resource file = filename of module questionnaire [name] url = canonical URL of the questionnaire processor = [processor] (name of the processor) (default is same name as questionnaire)","title":"Allowed in local or remote"},{"location":"admin/config/#resources-used-for-configuration","text":"","title":"Resources used for configuration"},{"location":"admin/config/#page-resource","text":"work in progress The page resource can have search fields to display, filters available, the structure definition, and the display order of fields. Complex field order can be changed within the complex field, but not across the whole resource. E.g. name.use, name.family, name.given, but you can't add gender between name.use and name.family. filter can include the label in the value. include any modifier as well. These must be the FHIR search parameters available for the resource. Name|name:contains","title":"Page resource"},{"location":"admin/docker/","text":"Getting Started with Docker Note Time to complete: 20 minutes Requirements The Docker approach requires Docker for Mac, Linux, or Windows. On Linux, docker-compose must also be installed. Memory dedicated to Docker should be increased to 4GB or more. This is a snapshot of memory usage with demo records and no dashboards. iHRIS, Redis, and Postgres use very minimal RAM, compared to Kibana (552MiB), ElasticSearch (846MiB), and HAPI FHIR Server (821MiB). $ docker stats --no-stream CONTAINER ID NAME CPU % MEM USAGE / LIMIT e70fb8fa618b ihris 0.00% 66.21MiB / 3.848GiB 8c97df1a9977 ihris_redis_1 0.18% 2.156MiB / 3.848GiB 6899574ca46f kibana 1.00% 552.5MiB / 3.848GiB e0a178ab8a1f es 2.17% 846.8MiB / 3.848GiB 19cd64447c41 fhir 1.19% 821.4MiB / 3.848GiB 8c1f348e9e3e ihris_db_1 0.20% 54.07MiB / 3.848GiB Clone the Repository Clone the repository and change to the root of it. git clone https://github.com/iHRIS/iHRIS.git # or for advanced users who may want to contribute later # git clone git@github.com:iHRIS/iHRIS.git cd iHRIS Launch HAPI If there isn't a HAPI server running, one can be brought up using the HAPI docker-compose file. This instance also includes a Postgres database. docker-compose -f docker-compose.hapi.yml up -d # the -d backgrounds the server stdout Upload Core Structure Definitions from HL7 The core structure definitions must be loaded into HAPI. If using an existing HAPI instance, this is still required. docker-compose -f docker-compose.hapi.config.yml up Note You must -- whether with an existing HAPI server or the one you just launched -- upload structure definitions. This is done with the HAPI FHIR cli (which actually launches another instance of HAPI then shuts down). This config must be run but only needs to be run once. You should see the stdout when running this. It will take ~5 minutes depending on your network latency. To run against a different HAPI FHIR server, the image can be run to target a different address: docker run --env IHRIS_FHIR__BASE=http://localhost:8080/fhir ihris/upload-definitions:latest # example output upload | 2020-10-19 16:08:23.233 [main] INFO c.u.f.c.ValidationDataUploader Uploading ValueSet 540/1167 : ValueSet/property-representation (1510 bytes} upload | 2020-10-19 16:08:23.251 [main] INFO c.u.f.c.ValidationDataUploader - Got ID: http://fhir:8080/fhir/ValueSet/property-representation/_history/1 # the process should exit with 0 upload | 2020-10-19 16:09:46.619 [main] INFO ca.uhn.fhir.cli.App HAPI FHIR is shutting down... upload exited with code 0 Upload Customized iHRIS Definitions iHRIS customizations are written as structure definitions. There is a core set of structure definitions in the iHRIS repository. These must be loaded into HAPI (in addition to the base uploaded above). You can either customize and upload your own iHRIS definitions, or for evaluation and demo purposes use a provided image. To use the existing structure definitions: docker-compose -f docker-compose.ihris.config.yml up To run against a different HAPI FHIR server, the image can be run to target a different address: docker run --env IHRIS_FHIR__BASE=http://localhost:8080/fhir ihris/ihris-config:latest Load Demo Data iHRIS does not come loaded with demo data. If there is a need to load fake data for evaluation and demo, there is an existing container to do so. docker-compose -f docker-compose.ihris.data.yml up -d Launch ElasticSearch and Kibana You may already have ElasticSearch and Kibana running. They are required for functionality. If not, run the following: docker-compose -f docker-compose.elastic.yml up -d Launch Redis and iHRIS docker-compose -f docker-compose.ihris.yml up -d Now open http://localhost:3000 and log in using username: admin@ihris.org and password: ihris There will be no dashboards by default. Enjoy! Troubleshooting Notes Ensure that /resources are loaded, check the logs: ihris | [winston] Attempt to write logs with no transports {\"message\":\"Loading Autoload resource directory: ../resources\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - ihris-page-practitioner\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - ihris-role-admin\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - ihris-role-open\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - staff\",\"level\":\"info\"} How to build a container locally and immediately remove it. For example: docker run --rm -it --network ihris_default $(docker build -q -f Dockerfile.upload.definitions .) This uses the helpful hint from here to build and run an image then delete it.","title":"Getting Started with Docker"},{"location":"admin/docker/#getting-started-with-docker","text":"Note Time to complete: 20 minutes","title":"Getting Started with Docker"},{"location":"admin/docker/#requirements","text":"The Docker approach requires Docker for Mac, Linux, or Windows. On Linux, docker-compose must also be installed. Memory dedicated to Docker should be increased to 4GB or more. This is a snapshot of memory usage with demo records and no dashboards. iHRIS, Redis, and Postgres use very minimal RAM, compared to Kibana (552MiB), ElasticSearch (846MiB), and HAPI FHIR Server (821MiB). $ docker stats --no-stream CONTAINER ID NAME CPU % MEM USAGE / LIMIT e70fb8fa618b ihris 0.00% 66.21MiB / 3.848GiB 8c97df1a9977 ihris_redis_1 0.18% 2.156MiB / 3.848GiB 6899574ca46f kibana 1.00% 552.5MiB / 3.848GiB e0a178ab8a1f es 2.17% 846.8MiB / 3.848GiB 19cd64447c41 fhir 1.19% 821.4MiB / 3.848GiB 8c1f348e9e3e ihris_db_1 0.20% 54.07MiB / 3.848GiB","title":"Requirements"},{"location":"admin/docker/#clone-the-repository","text":"Clone the repository and change to the root of it. git clone https://github.com/iHRIS/iHRIS.git # or for advanced users who may want to contribute later # git clone git@github.com:iHRIS/iHRIS.git cd iHRIS","title":"Clone the Repository"},{"location":"admin/docker/#launch-hapi","text":"If there isn't a HAPI server running, one can be brought up using the HAPI docker-compose file. This instance also includes a Postgres database. docker-compose -f docker-compose.hapi.yml up -d # the -d backgrounds the server stdout","title":"Launch HAPI"},{"location":"admin/docker/#upload-core-structure-definitions-from-hl7","text":"The core structure definitions must be loaded into HAPI. If using an existing HAPI instance, this is still required. docker-compose -f docker-compose.hapi.config.yml up Note You must -- whether with an existing HAPI server or the one you just launched -- upload structure definitions. This is done with the HAPI FHIR cli (which actually launches another instance of HAPI then shuts down). This config must be run but only needs to be run once. You should see the stdout when running this. It will take ~5 minutes depending on your network latency. To run against a different HAPI FHIR server, the image can be run to target a different address: docker run --env IHRIS_FHIR__BASE=http://localhost:8080/fhir ihris/upload-definitions:latest # example output upload | 2020-10-19 16:08:23.233 [main] INFO c.u.f.c.ValidationDataUploader Uploading ValueSet 540/1167 : ValueSet/property-representation (1510 bytes} upload | 2020-10-19 16:08:23.251 [main] INFO c.u.f.c.ValidationDataUploader - Got ID: http://fhir:8080/fhir/ValueSet/property-representation/_history/1 # the process should exit with 0 upload | 2020-10-19 16:09:46.619 [main] INFO ca.uhn.fhir.cli.App HAPI FHIR is shutting down... upload exited with code 0","title":"Upload Core Structure Definitions from HL7"},{"location":"admin/docker/#upload-customized-ihris-definitions","text":"iHRIS customizations are written as structure definitions. There is a core set of structure definitions in the iHRIS repository. These must be loaded into HAPI (in addition to the base uploaded above). You can either customize and upload your own iHRIS definitions, or for evaluation and demo purposes use a provided image. To use the existing structure definitions: docker-compose -f docker-compose.ihris.config.yml up To run against a different HAPI FHIR server, the image can be run to target a different address: docker run --env IHRIS_FHIR__BASE=http://localhost:8080/fhir ihris/ihris-config:latest","title":"Upload Customized iHRIS Definitions"},{"location":"admin/docker/#load-demo-data","text":"iHRIS does not come loaded with demo data. If there is a need to load fake data for evaluation and demo, there is an existing container to do so. docker-compose -f docker-compose.ihris.data.yml up -d","title":"Load Demo Data"},{"location":"admin/docker/#launch-elasticsearch-and-kibana","text":"You may already have ElasticSearch and Kibana running. They are required for functionality. If not, run the following: docker-compose -f docker-compose.elastic.yml up -d","title":"Launch ElasticSearch and Kibana"},{"location":"admin/docker/#launch-redis-and-ihris","text":"docker-compose -f docker-compose.ihris.yml up -d Now open http://localhost:3000 and log in using username: admin@ihris.org and password: ihris There will be no dashboards by default. Enjoy!","title":"Launch Redis and iHRIS"},{"location":"admin/docker/#troubleshooting-notes","text":"Ensure that /resources are loaded, check the logs: ihris | [winston] Attempt to write logs with no transports {\"message\":\"Loading Autoload resource directory: ../resources\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - ihris-page-practitioner\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - ihris-role-admin\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - ihris-role-open\",\"level\":\"info\"} ihris | [winston] Attempt to write logs with no transports {\"message\":\"Saving Basic - staff\",\"level\":\"info\"} How to build a container locally and immediately remove it. For example: docker run --rm -it --network ihris_default $(docker build -q -f Dockerfile.upload.definitions .) This uses the helpful hint from here to build and run an image then delete it.","title":"Troubleshooting Notes"},{"location":"admin/install/","text":"Installation This was done on a clean Ubuntu 20.4 server. Node JS LTS curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt-get install -y nodejs sudo npm install -g npm Redis This must be secured or people will be able to do bad things. sudo apt install redis Tomcat sudo apt install tomcat9 PostgreSQL This must be secured or people will be able to do bad things. sudo apt install postgresql HAPI FHIR This must be secured or people will be able to do bad things. Create Database and User sudo -u postgres psql create database hapi ; create user hapi with encrypted password 'PASS' ; grant all privileges on database hapi to hapi ; \\q Install Maven sudo apt install maven Compile HAPI git clone https://github.com/hapifhir/hapi-fhir-jpaserver-starter.git cd hapi-fhir-jpaserver-starter Edit pom.xml and change the following line from hapi-fhir-jpaserver or ROOT (starting with version 5.1.0): <finalName> hapi </finalName> For versions starting with 5.2.0 Things were streamlined a bit so the values to edit are simpler. Edit src/main/resources/application.yaml and update the following values: spring: datasource: url: 'jdbc:postgresql://localhost:5432/hapi' username: hapi password: PASS driveClassName: org.postgresql.Driver jpa: properties: hibernate.search.enabled: true hapi: fhir: fhir_version: R4 enable_index_missing_fields: true tester: id: home name: iHRIS server_address: http://localhost:8080/hapi/fhir/ refuse_to_fetch_third_party_urls: false fhir_version: R4 For versions starting with 5.1.0 Edit src/main/resources/application.yaml and update the following values: spring: datasource: url: 'jdbc:postgresql://localhost:5432/hapi' username: hapi password: PASS driveClassName: org.postgresql.Driver jpa: properties: hibernate.dialect: org.hibernate.dialect.PostgreSQL95Dialect hibernate.search.default.indexBase=/var/lib/tomcat9/target/lucenefiles hapi: fhir: tester: id: home name: iHRIS server_address: http://localhost:8080/hapi/fhir/ refuse_to_fetch_third_party_urls: false fhir_version: R4 For versions prior to 5.1.0 use these instead of editing application.yaml Edit src/main/resources/hapi.properties and set the following: server_address=http://localhost:8080/hapi/fhir/ datasource.driver=org.postgresql.Driver datasource.url=jdbc:postgresql://localhost:5432/hapi datasource.username=hapi datasource.password=PASS hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect hibernate.search.default.indexBase=/var/lib/tomcat9/target/lucenefiles Create war file sudo apt install default-jdk mvn clean install -DskipTests sudo mkdir -p /var/lib/tomcat9/target/lucenefiles sudo chown -R tomcat:tomcat /var/lib/tomcat9/target sudo cp target/hapi.war /var/lib/tomcat9/webapps Set paths in startup file Edit /etc/systemd/system/multi-user.target.wants/tomcat9.service In the security section add the following directory with a ReadWritePath ReadWritePaths=/var/lib/tomcat9/target/ Load basic definitions Download and install hapi-fhir-cli: https://hapifhir.io/hapi-fhir/docs/tools/hapi_fhir_cli.html wget https://github.com/hapifhir/hapi-fhir/releases/download/v5.2.0/hapi-fhir-5.2.0-cli.tar.bz2 Then load the basic definitions ./hapi-fhir-cli upload-definitions -v r4 -t http://localhost:8080/hapi/fhir/ SUSHI sudo npm install -g fsh-sushi sudo npm install -g antlr4 You can make customizations for your own configurations in the ig/ directory. To get the default data, you can compile the FSH files with: cd ig/ sushi -s . Any time you make changes to the FSH files you should rebuild them this way. The FSH files are in ig/input/fsh/. Loading Resources There is a script in the tools/ directory to load some sample configuration files as well as the FHIR resources created by SUSHI. The first time you will need to run npm install: cd tools/ npm install All the following commands should be run from the tools/ directory, replacing the server with the correct location for your installation. After that, you can use the load.js script to load FHIR resources into your FHIR server with: node load.js --server http://localhost:8080/hapi/fhir PATH/TO/FHIR.json To load the starter resources, you should start with: node load.js --server http://localhost:8080/hapi/fhir ../resources/*.json After building the FSH files, you can import them with the following: node load.js --server http://localhost:8080/hapi/fhir ../ig/fsh-generated/resources/*.json ElasticSearch Ubuntu install instructions: https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html Make sure to install ElasticSearch and Kibana: sudo apt install elasticsearch kibana After installing, edit /etc/kibana/kibana.yml and set server.basePath server.basePath : \"/kibana\" Back end server Before starting You'll need to run npm install when additional node modules are installed or updated and also before starting the first time. cd ihris-backend/ npm install Development mode Run the following to start the server in development mode. cd ihris-backend/ npm run dev Production mode Run the following to start the server in production mode. cd ihris-backend/ npm run start TODO: Convert this to a systemd script for startup and shutdown # Front end Development Built with vue cli 4 .4.1 ``` bash sudo npm install -g @vue/cli To run in development mode You may need to edit the proxy settings in ihris-frontend/vue.config.js depending on where you started the backend. cd ihris-frontend/ npm run serve The output will give you a URL to access the frontend. Production The frontend will be built and saved to the backend server public files (ihris-backend/public/) to be served or you can run them from any static web server. cd ihris-frontend/ npm run build The files in ihris-frontend/dist/ can be served statically from your web server. Releases will be compiled to the ihris-backend/public/ directory so you will only need to do this if you want to make changes to the frontend software.","title":"Installation"},{"location":"admin/install/#installation","text":"This was done on a clean Ubuntu 20.4 server.","title":"Installation"},{"location":"admin/install/#node-js-lts","text":"curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt-get install -y nodejs sudo npm install -g npm","title":"Node JS LTS"},{"location":"admin/install/#redis","text":"This must be secured or people will be able to do bad things. sudo apt install redis","title":"Redis"},{"location":"admin/install/#tomcat","text":"sudo apt install tomcat9","title":"Tomcat"},{"location":"admin/install/#postgresql","text":"This must be secured or people will be able to do bad things. sudo apt install postgresql","title":"PostgreSQL"},{"location":"admin/install/#hapi-fhir","text":"This must be secured or people will be able to do bad things.","title":"HAPI FHIR"},{"location":"admin/install/#create-database-and-user","text":"sudo -u postgres psql create database hapi ; create user hapi with encrypted password 'PASS' ; grant all privileges on database hapi to hapi ; \\q","title":"Create Database and User"},{"location":"admin/install/#install-maven","text":"sudo apt install maven","title":"Install Maven"},{"location":"admin/install/#compile-hapi","text":"git clone https://github.com/hapifhir/hapi-fhir-jpaserver-starter.git cd hapi-fhir-jpaserver-starter Edit pom.xml and change the following line from hapi-fhir-jpaserver or ROOT (starting with version 5.1.0): <finalName> hapi </finalName>","title":"Compile HAPI"},{"location":"admin/install/#sushi","text":"sudo npm install -g fsh-sushi sudo npm install -g antlr4 You can make customizations for your own configurations in the ig/ directory. To get the default data, you can compile the FSH files with: cd ig/ sushi -s . Any time you make changes to the FSH files you should rebuild them this way. The FSH files are in ig/input/fsh/.","title":"SUSHI"},{"location":"admin/install/#loading-resources","text":"There is a script in the tools/ directory to load some sample configuration files as well as the FHIR resources created by SUSHI. The first time you will need to run npm install: cd tools/ npm install All the following commands should be run from the tools/ directory, replacing the server with the correct location for your installation. After that, you can use the load.js script to load FHIR resources into your FHIR server with: node load.js --server http://localhost:8080/hapi/fhir PATH/TO/FHIR.json To load the starter resources, you should start with: node load.js --server http://localhost:8080/hapi/fhir ../resources/*.json After building the FSH files, you can import them with the following: node load.js --server http://localhost:8080/hapi/fhir ../ig/fsh-generated/resources/*.json","title":"Loading Resources"},{"location":"admin/install/#elasticsearch","text":"Ubuntu install instructions: https://www.elastic.co/guide/en/elasticsearch/reference/current/deb.html Make sure to install ElasticSearch and Kibana: sudo apt install elasticsearch kibana After installing, edit /etc/kibana/kibana.yml and set server.basePath server.basePath : \"/kibana\"","title":"ElasticSearch"},{"location":"admin/install/#back-end-server","text":"","title":"Back end server"},{"location":"admin/install/#before-starting","text":"You'll need to run npm install when additional node modules are installed or updated and also before starting the first time. cd ihris-backend/ npm install","title":"Before starting"},{"location":"admin/install/#development-mode","text":"Run the following to start the server in development mode. cd ihris-backend/ npm run dev","title":"Development mode"},{"location":"admin/install/#production-mode","text":"Run the following to start the server in production mode. cd ihris-backend/ npm run start TODO: Convert this to a systemd script for startup and shutdown # Front end Development Built with vue cli 4 .4.1 ``` bash sudo npm install -g @vue/cli","title":"Production mode"},{"location":"admin/install/#to-run-in-development-mode","text":"You may need to edit the proxy settings in ihris-frontend/vue.config.js depending on where you started the backend. cd ihris-frontend/ npm run serve The output will give you a URL to access the frontend.","title":"To run in development mode"},{"location":"admin/install/#production","text":"The frontend will be built and saved to the backend server public files (ihris-backend/public/) to be served or you can run them from any static web server. cd ihris-frontend/ npm run build The files in ihris-frontend/dist/ can be served statically from your web server. Releases will be compiled to the ihris-backend/public/ directory so you will only need to do this if you want to make changes to the frontend software.","title":"Production"},{"location":"dev/customization/","text":"Customization Customizations can be used with FHIR Shorthand to define resources. https://build.fhir.org/ig/HL7/fhir-shorthand/ This will be better defined in the future, but for now, you can create the files in the fsh/ directory of the repository. You should use the same prefix for your files and various names that won't conflict with default iHRIS configurations. Create a Profile / Structure Definition You can profile existing FHIR resources and create extensions for to add fields. Any fields you want to show up on the default iHRIS page for the resource need the must support flag set. You can also set the label to display for the field as well as define validation constraints and valuesets to be used. Constraint keys must begin with \"ihris-\" to be processed. If the expression is the same, the key can be reused. Complete examples can be found in the fsh/ directory. The following is a simple example of a Practitioner profile. Profile: ExamplePractitioner Parent: Practitioner Id: example-practitioner Title: \"Example Practitioner\" Description: \"Example Practitioner for iHRIS\" * name 1..1 MS * name ^label = \"Name\" * name.family 1..1 MS * name.family ^ label = \"Surname\" * name.family ^constraint[0].key = \"ihris-name-check\" * name.family ^constraint[0].severity = #error * name.family ^constraint[0].expression = \"matches('^[A-Za-z ]*$')\" * name.family ^constraint[0].human = \"Name must be only text.\" * name.given 1..* MS * name.given ^label = \"Given Name\" * gender 1..1 MS * gender ^label = \"Gender\" * birthDate MS * birthDate ^label = \"Birth Date\" * birthDate obeys ihris-age-18 * birthDate ^minValueQuantity.system = \"http://unitsofmeasure.org/\" * birthDate ^minValueQuantity.code = #a * birthDate ^minValueQuantity.value = 100 * birthDate ^maxValueQuantity.system = \"http://unitsofmeasure.org/\" * birthDate ^maxValueQuantity.code = #a * birthDate ^maxValueQuantity.value = -18 * photo 0..1 MS * photo ^label = \"Photo\" Creating pages Pages define how a resource is displayed by default and how it is edited. You can control the sections displayed as well as the order of fields. Any fields that are defined in the profile as \"must support\" will appear in the first section if not included elsewhere. The page defines the search terms that can be used on a search page for the resource. The page defines any secondary resources that are linked to this resource and you can display those in a table on the page. You can include links to modify or create these secondary resources. https://github.com/iHRIS/iHRIS/blob/master/fsh/IhrisPage.fsh Creating single data entry pages Single data entry pages can be created using a FHIR Questionnaire. The linkId must refer to a path in a FHIR resource where the field will be populated and the definition should refer to the field in your customized StructureDefinition. See https://github.com/iHRIS/iHRIS/blob/master/fsh/IhrisPractitioner.fsh#L187 Creating a workflow Similar to single data entry pages, you can also create a questionnaire for custom workflows where you want to update multiple resources. The workflow is custom Node JS code stored in a FHIR Library. The library must be signed to be sure that the code is allowed to be run by the server. For example, promoting a practitioner is done with a workflow. An example Library is here: https://github.com/iHRIS/iHRIS/blob/master/resources/Library-ihris-workflow-promotion.json The code was created using the createModule.js tool from this source code: https://github.com/iHRIS/iHRIS/blob/master/resources/moduleCode/workflowPromotion.js","title":"Customization"},{"location":"dev/customization/#customization","text":"Customizations can be used with FHIR Shorthand to define resources. https://build.fhir.org/ig/HL7/fhir-shorthand/ This will be better defined in the future, but for now, you can create the files in the fsh/ directory of the repository. You should use the same prefix for your files and various names that won't conflict with default iHRIS configurations.","title":"Customization"},{"location":"dev/customization/#create-a-profile-structure-definition","text":"You can profile existing FHIR resources and create extensions for to add fields. Any fields you want to show up on the default iHRIS page for the resource need the must support flag set. You can also set the label to display for the field as well as define validation constraints and valuesets to be used. Constraint keys must begin with \"ihris-\" to be processed. If the expression is the same, the key can be reused. Complete examples can be found in the fsh/ directory. The following is a simple example of a Practitioner profile. Profile: ExamplePractitioner Parent: Practitioner Id: example-practitioner Title: \"Example Practitioner\" Description: \"Example Practitioner for iHRIS\" * name 1..1 MS * name ^label = \"Name\" * name.family 1..1 MS * name.family ^ label = \"Surname\" * name.family ^constraint[0].key = \"ihris-name-check\" * name.family ^constraint[0].severity = #error * name.family ^constraint[0].expression = \"matches('^[A-Za-z ]*$')\" * name.family ^constraint[0].human = \"Name must be only text.\" * name.given 1..* MS * name.given ^label = \"Given Name\" * gender 1..1 MS * gender ^label = \"Gender\" * birthDate MS * birthDate ^label = \"Birth Date\" * birthDate obeys ihris-age-18 * birthDate ^minValueQuantity.system = \"http://unitsofmeasure.org/\" * birthDate ^minValueQuantity.code = #a * birthDate ^minValueQuantity.value = 100 * birthDate ^maxValueQuantity.system = \"http://unitsofmeasure.org/\" * birthDate ^maxValueQuantity.code = #a * birthDate ^maxValueQuantity.value = -18 * photo 0..1 MS * photo ^label = \"Photo\"","title":"Create a Profile / Structure Definition"},{"location":"dev/customization/#creating-pages","text":"Pages define how a resource is displayed by default and how it is edited. You can control the sections displayed as well as the order of fields. Any fields that are defined in the profile as \"must support\" will appear in the first section if not included elsewhere. The page defines the search terms that can be used on a search page for the resource. The page defines any secondary resources that are linked to this resource and you can display those in a table on the page. You can include links to modify or create these secondary resources. https://github.com/iHRIS/iHRIS/blob/master/fsh/IhrisPage.fsh","title":"Creating pages"},{"location":"dev/customization/#creating-single-data-entry-pages","text":"Single data entry pages can be created using a FHIR Questionnaire. The linkId must refer to a path in a FHIR resource where the field will be populated and the definition should refer to the field in your customized StructureDefinition. See https://github.com/iHRIS/iHRIS/blob/master/fsh/IhrisPractitioner.fsh#L187","title":"Creating single data entry pages"},{"location":"dev/customization/#creating-a-workflow","text":"Similar to single data entry pages, you can also create a questionnaire for custom workflows where you want to update multiple resources. The workflow is custom Node JS code stored in a FHIR Library. The library must be signed to be sure that the code is allowed to be run by the server. For example, promoting a practitioner is done with a workflow. An example Library is here: https://github.com/iHRIS/iHRIS/blob/master/resources/Library-ihris-workflow-promotion.json The code was created using the createModule.js tool from this source code: https://github.com/iHRIS/iHRIS/blob/master/resources/moduleCode/workflowPromotion.js","title":"Creating a workflow"},{"location":"dev/fhir_http/","text":"FHIR HTTP Endpoints POST INVALID return 422 and OperationOutcome POST VALID return 201 and Resource with ID and meta also includes ETag and Location headers PUT INVALID return 422 and OperationOutcome PUT SAME return 200 and resource (no change to versionId or lastUpdated include ETag and Content-Location header PUT UPDATE return 200 and resource include ETag and Content-Location header PUT UPDATE WITH WRONG ID return 400 and OperationOutcome GET resource/id return 200 with resource include ETag and Content-Location headers GET resource/invalid id return 404 and OperationOutcome GET resource?query return 200 and Bundle (even if 0 found) DELETE resource/id return 200 and OperationOutcome DELETE resource/invalid id return 404 and OperationOutcome","title":"FHIR HTTP Endpoints"},{"location":"dev/fhir_http/#fhir-http-endpoints","text":"","title":"FHIR HTTP Endpoints"},{"location":"dev/fhir_http/#post-invalid","text":"return 422 and OperationOutcome","title":"POST INVALID"},{"location":"dev/fhir_http/#post-valid","text":"return 201 and Resource with ID and meta also includes ETag and Location headers","title":"POST VALID"},{"location":"dev/fhir_http/#put-invalid","text":"return 422 and OperationOutcome","title":"PUT INVALID"},{"location":"dev/fhir_http/#put-same","text":"return 200 and resource (no change to versionId or lastUpdated include ETag and Content-Location header","title":"PUT SAME"},{"location":"dev/fhir_http/#put-update","text":"return 200 and resource include ETag and Content-Location header","title":"PUT UPDATE"},{"location":"dev/fhir_http/#put-update-with-wrong-id","text":"return 400 and OperationOutcome","title":"PUT UPDATE WITH WRONG ID"},{"location":"dev/fhir_http/#get-resourceid","text":"return 200 with resource include ETag and Content-Location headers","title":"GET resource/id"},{"location":"dev/fhir_http/#get-resourceinvalid-id","text":"return 404 and OperationOutcome","title":"GET resource/invalid id"},{"location":"dev/fhir_http/#get-resourcequery","text":"return 200 and Bundle (even if 0 found)","title":"GET resource?query"},{"location":"dev/fhir_http/#delete-resourceid","text":"return 200 and OperationOutcome","title":"DELETE resource/id"},{"location":"dev/fhir_http/#delete-resourceinvalid-id","text":"return 404 and OperationOutcome","title":"DELETE resource/invalid id"},{"location":"dev/modules/","text":"Library modules the ihris-backend/modules directory is in the search path so can use require with no path to import files from there. e.g. const nconf = require('config')","title":"Library modules"},{"location":"dev/modules/#library-modules","text":"the ihris-backend/modules directory is in the search path so can use require with no path to import files from there. e.g. const nconf = require('config')","title":"Library modules"},{"location":"dev/questionnaire/","text":"Questionnaires definition is currently only used to determine binding for reference fields Also used as the profile at the top grouping for a resource with the resource linkId (e.g. Practitioner) first level of items in questionnaire should all be type \"group\" for the sections anything that has repeats: true must have a linkId that ends with an array index (e.g. [0]) linkId must be in the correct format to put things in the right place. This only matters for fields that have values Resource.element.element use indexes when it is an array data type or when multiple resources would be created Resource[0].element[1].element Practitioner.name[0].use readOnly fields won't be displayed. If needed to display, use a display questionnaire item. for now, choice type will only work with valuesets, need to add code to support answerOptions top level groups will be sections. other groups will be combined in a card and can allow repeats repeats will increment the index given for the main grouping if allowed so use repeated groups last. e.g. name[0] is use official, but additional names can be added without use set. Still need to work this out response object has link to the primary resource created in the subject field","title":"Questionnaires"},{"location":"dev/questionnaire/#questionnaires","text":"definition is currently only used to determine binding for reference fields Also used as the profile at the top grouping for a resource with the resource linkId (e.g. Practitioner) first level of items in questionnaire should all be type \"group\" for the sections anything that has repeats: true must have a linkId that ends with an array index (e.g. [0]) linkId must be in the correct format to put things in the right place. This only matters for fields that have values Resource.element.element use indexes when it is an array data type or when multiple resources would be created Resource[0].element[1].element Practitioner.name[0].use readOnly fields won't be displayed. If needed to display, use a display questionnaire item. for now, choice type will only work with valuesets, need to add code to support answerOptions top level groups will be sections. other groups will be combined in a card and can allow repeats repeats will increment the index given for the main grouping if allowed so use repeated groups last. e.g. name[0] is use official, but additional names can be added without use set. Still need to work this out response object has link to the primary resource created in the subject field","title":"Questionnaires"},{"location":"dev/roles_and_tasks/","text":"Permissions Roles are a Basic profile with the following fields: primary[1..1] - boolean for filtering to assign to users role[0..*] - reference to another role task[0..*] - task definitions permission - valueset for read|write|delete|filter|* resource - resource (Practitioner or * for all allowed) instance - id of the resource for a single instance field - string that is a FHIRPath to a field in the structure definition constraint FHIRPath where expression required for this resource. Not relevant for instances. query string for filter permission to be used on a all searches by this user It will be resolved as resource.where( contraint ) delete only makes sense on a profile. It will ignored if trying to set on a resource or including a field. resolution Add permission to user object based on roles (or custom module) User.updatePermissions() adds all permissions from roles in User to the permissions array. user.addPermission( permission, resource, id, constraint, field ) * sending field when it's already been sent without a field does nothing. The higher level permission overrides it. (order doesn't matter, sending the higher level later overrides it.) * read, Practitioner overrides read, Practitioner, anything * sending an id when the higher level resource has already been sent does nothing. (order doesn't matter, sending the higher level later overrides it.) * read, Practitioner overrides read, Practitioner, 1234 * You can only set either id or contraint. * if the resource is * then the id and field can't be set If the default is not limited by fields, then full access will be given regardless of other settings. In this case the ids and constraints won't even be stored for reference. When multiple matches are available, first it checks the id, then the first loaded constraint that matches will apply, it will not be combined. For example if one role assigns * read, Practitioner, abc, null, name and another does * read, Practitioner, null, meta.profile = 'x', telecom if Practitioner/abc is profile x, the user will only be able to see name. For any other Practitioners that are profile x they will only see telecom. Further if there is also * read, Practitioner, null, name.given = 'Test', birthDate then it will depend on the order the permissions were loaded when the profile is x and the given name is 'Test'. Basically getting too complex with overlapping permissions could cause odd circumstances, but this shoudl be unlikely. When there is a mix of wildcard and specific permissions/resources then the most specific will override when there are further constraints in the order below. Full permission will be allowed by anything that gives it. * read Practitioner * * Practitioner * read * * * * Based on the results returned from the previous step, when multiple match types have a restricted field list, it will be concatenated if multiples match. Saved in structure as: When the constraint is an ID it must start with '/' { \"permission\" : { \"resource\" : true | { \"*\" : \"field\" , \"id\" : { \"id1\" : \"field\" | true , \"id2\" : \"field\" | true }, \"constraint\" : { \"constraint1\" : \"field\" | true } } } } examples Everything: user.addPermission( \" \", \" \" ) { \"*\" : { \"*\" : true } } Basic access to get any information: * user.addPermission( \"read\", \"StructureDefinition\" ) * user.addPermission( \"read\", \"ValueSet\" ) * user.addPermission( \"read\", \"CodeSystem\" ) { \"read\" : { \"StructureDefinition\" : true , \"ValueSet\" : true , \"CodeSystem\" : true }, } Complex example. * Resolution * If the id is 1234, user can see everthing. * If the profile is as below, those fields can be seen. * Otherwise the default fields can be seen. * addPermissions * user.addPermission( \"read\", \"Practitioner\", null, null, \"name\" ) * user.addPermission( \"read\", \"Practitioner\", null, null, \"gender\" ) * user.addPermission( \"read\", \"Practitioner\", null, null, \"birthDate\" ) * user.addPermission( \"read\", \"Practitioner\", \"1234\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"name\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"gender\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"birthDate\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"qualification\" ) * user.addPermission( \"write\", \"Practitioner\", \"1234\" ) { \"read\" : { \"Practitioner\" : { // Ca n read all ihris - prac t i t io ner pro f iled Prac t i t io ners o nl y f or f ields : na me , ge n der , bir t hDa te \"*\" : { \"name\" : true , \"gender\" : true , \"birthDate\" : true }, // Ca n read every t hi n g i n Prac t i t io ner / 1234 \"id\" : { \"1234\" : true }, \"constraint\" : { // Ca n read some f ields whe n t he pro f ile is as give n \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\" : { \"name\" : true , \"gender\" : true , \"birthDate\" : true , \"qualification\" : true } } } }, \"write\" : { \"Practitioner\" : { \"id\" : { \"1234\" : true } } // wri te does n o t guara ntee read } } read Practitioner abc read Practitioner profile = xx fields [ telecom ] read Practitioner fields [ name ] Constraints Constraints are FHIRPath expressions. They will be processed through an exists() method to determine if the resource matches the constraint. When the element can be an array, special care must be taken. See http://hl7.org/fhirpath/ Use ~ instead of = to ignore case and extra whitespace for string comparison. Patient.name.family ~ 'test' Will work when there is only one name with family of 'Test', but will fail if there are multiple names. To find any possible matches you can use: Patient.name.exists(family ~ 'test') To check for profile matches, the following can be used meta.profile.exists( $this = 'http://ihris.org/fhir/StructureDefinition/test-profile' ) Multiple queries can be included. meta.profile.exists( $this = 'http://ihris.org/fhir/StructureDefinition/test-profile' ) and name.exists( family = 'Test' )","title":"Permissions"},{"location":"dev/roles_and_tasks/#permissions","text":"Roles are a Basic profile with the following fields: primary[1..1] - boolean for filtering to assign to users role[0..*] - reference to another role task[0..*] - task definitions permission - valueset for read|write|delete|filter|* resource - resource (Practitioner or * for all allowed) instance - id of the resource for a single instance field - string that is a FHIRPath to a field in the structure definition constraint FHIRPath where expression required for this resource. Not relevant for instances. query string for filter permission to be used on a all searches by this user It will be resolved as resource.where( contraint ) delete only makes sense on a profile. It will ignored if trying to set on a resource or including a field.","title":"Permissions"},{"location":"dev/roles_and_tasks/#resolution","text":"Add permission to user object based on roles (or custom module) User.updatePermissions() adds all permissions from roles in User to the permissions array. user.addPermission( permission, resource, id, constraint, field ) * sending field when it's already been sent without a field does nothing. The higher level permission overrides it. (order doesn't matter, sending the higher level later overrides it.) * read, Practitioner overrides read, Practitioner, anything * sending an id when the higher level resource has already been sent does nothing. (order doesn't matter, sending the higher level later overrides it.) * read, Practitioner overrides read, Practitioner, 1234 * You can only set either id or contraint. * if the resource is * then the id and field can't be set If the default is not limited by fields, then full access will be given regardless of other settings. In this case the ids and constraints won't even be stored for reference. When multiple matches are available, first it checks the id, then the first loaded constraint that matches will apply, it will not be combined. For example if one role assigns * read, Practitioner, abc, null, name and another does * read, Practitioner, null, meta.profile = 'x', telecom if Practitioner/abc is profile x, the user will only be able to see name. For any other Practitioners that are profile x they will only see telecom. Further if there is also * read, Practitioner, null, name.given = 'Test', birthDate then it will depend on the order the permissions were loaded when the profile is x and the given name is 'Test'. Basically getting too complex with overlapping permissions could cause odd circumstances, but this shoudl be unlikely. When there is a mix of wildcard and specific permissions/resources then the most specific will override when there are further constraints in the order below. Full permission will be allowed by anything that gives it. * read Practitioner * * Practitioner * read * * * * Based on the results returned from the previous step, when multiple match types have a restricted field list, it will be concatenated if multiples match. Saved in structure as: When the constraint is an ID it must start with '/' { \"permission\" : { \"resource\" : true | { \"*\" : \"field\" , \"id\" : { \"id1\" : \"field\" | true , \"id2\" : \"field\" | true }, \"constraint\" : { \"constraint1\" : \"field\" | true } } } }","title":"resolution"},{"location":"dev/roles_and_tasks/#examples","text":"Everything: user.addPermission( \" \", \" \" ) { \"*\" : { \"*\" : true } } Basic access to get any information: * user.addPermission( \"read\", \"StructureDefinition\" ) * user.addPermission( \"read\", \"ValueSet\" ) * user.addPermission( \"read\", \"CodeSystem\" ) { \"read\" : { \"StructureDefinition\" : true , \"ValueSet\" : true , \"CodeSystem\" : true }, } Complex example. * Resolution * If the id is 1234, user can see everthing. * If the profile is as below, those fields can be seen. * Otherwise the default fields can be seen. * addPermissions * user.addPermission( \"read\", \"Practitioner\", null, null, \"name\" ) * user.addPermission( \"read\", \"Practitioner\", null, null, \"gender\" ) * user.addPermission( \"read\", \"Practitioner\", null, null, \"birthDate\" ) * user.addPermission( \"read\", \"Practitioner\", \"1234\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"name\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"gender\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"birthDate\" ) * user.addPermission( \"read\", \"Practitioner\", null, \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\", \"qualification\" ) * user.addPermission( \"write\", \"Practitioner\", \"1234\" ) { \"read\" : { \"Practitioner\" : { // Ca n read all ihris - prac t i t io ner pro f iled Prac t i t io ners o nl y f or f ields : na me , ge n der , bir t hDa te \"*\" : { \"name\" : true , \"gender\" : true , \"birthDate\" : true }, // Ca n read every t hi n g i n Prac t i t io ner / 1234 \"id\" : { \"1234\" : true }, \"constraint\" : { // Ca n read some f ields whe n t he pro f ile is as give n \"meta.profile = 'http://ihris.org/fhir/StructureDefinition/ihris-practitioner'\" : { \"name\" : true , \"gender\" : true , \"birthDate\" : true , \"qualification\" : true } } } }, \"write\" : { \"Practitioner\" : { \"id\" : { \"1234\" : true } } // wri te does n o t guara ntee read } } read Practitioner abc read Practitioner profile = xx fields [ telecom ] read Practitioner fields [ name ]","title":"examples"},{"location":"dev/roles_and_tasks/#constraints","text":"Constraints are FHIRPath expressions. They will be processed through an exists() method to determine if the resource matches the constraint. When the element can be an array, special care must be taken. See http://hl7.org/fhirpath/ Use ~ instead of = to ignore case and extra whitespace for string comparison. Patient.name.family ~ 'test' Will work when there is only one name with family of 'Test', but will fail if there are multiple names. To find any possible matches you can use: Patient.name.exists(family ~ 'test') To check for profile matches, the following can be used meta.profile.exists( $this = 'http://ihris.org/fhir/StructureDefinition/test-profile' ) Multiple queries can be included. meta.profile.exists( $this = 'http://ihris.org/fhir/StructureDefinition/test-profile' ) and name.exists( family = 'Test' )","title":"Constraints"},{"location":"dev/short_name/","text":"$short-name Endpoint Access Any read access will give access to the $short-name. Should this be denied if not full access? Endpoints /$short-name?code=X&system=X[&valueset=X] /$short-name?reference=X Should these be supported? /Resource/id/$short-name /CodeSystem/id/$short-name?code=X[&valueset=X] /ValueSet/id/$short-name?code=X&system=X /Resource/$short-name?_id=X /CodeSystem/$short-name?code=X&system=X[&valueset=X] /ValueSet/$short-name?code=X&system=X&valueset=X","title":"$short-name Endpoint"},{"location":"dev/short_name/#short-name-endpoint","text":"","title":"$short-name Endpoint"},{"location":"dev/short_name/#access","text":"Any read access will give access to the $short-name. Should this be denied if not full access?","title":"Access"},{"location":"dev/short_name/#endpoints","text":"/$short-name?code=X&system=X[&valueset=X] /$short-name?reference=X Should these be supported? /Resource/id/$short-name /CodeSystem/id/$short-name?code=X[&valueset=X] /ValueSet/id/$short-name?code=X&system=X /Resource/$short-name?_id=X /CodeSystem/$short-name?code=X&system=X[&valueset=X] /ValueSet/$short-name?code=X&system=X&valueset=X","title":"Endpoints"},{"location":"dev/task_resolution/","text":"Task Resolution Code needs to determine if someone has permission (read/write/etc.) on a resource. hasPermission( READ, RESOURCE, INSTANCE ) look up in FHIR server based on roles assigned to the person. read, Practitioner, abc is approved by having any of (broadest to most specific): user/*.* user/*.read user/Practitioner.* user/Practitioner.read user/Practitioner/abc.* user/Practitioner/abc.read stored separately for faster lookup? scope, resource, instance, permission?","title":"Task Resolution"},{"location":"dev/task_resolution/#task-resolution","text":"Code needs to determine if someone has permission (read/write/etc.) on a resource. hasPermission( READ, RESOURCE, INSTANCE ) look up in FHIR server based on roles assigned to the person. read, Practitioner, abc is approved by having any of (broadest to most specific): user/*.* user/*.read user/Practitioner.* user/Practitioner.read user/Practitioner/abc.* user/Practitioner/abc.read stored separately for faster lookup? scope, resource, instance, permission?","title":"Task Resolution"},{"location":"dev/todo/","text":"ToDo Create tests for fhirAxios:lookup and route/fhir CodeSystem/$lookup setup reference lookup to be configurable (in fhir-reference.vue, hard coded to name) Create audit module and tests Save audit messages for activity login/logout save/update resource Internationalization add additional fields to resource display defaultValue[x] fixed[x] pattern[x] minValue[x] maxValue[x] constraint add mixin for fhir elements in frontend add tests for frontend change coding valueset lookup to search based on URL instead of by ID fix valueset expansion lookup to work better on edge cases cache valuesets in $store object instead of hitting them all the time fix issue with valuesets selecting first item autocomplete? questionnaire data entry add form validation and required fields add required fields allow readonly fields (like code for codesystem edit, but not add) change $short-name operation to allow searches and results of the shortname and update fhir-reference component to use that set up all components to work like fhir-reference for presets (disable element on add page when preset) set up \"static\" FHIR resource (documentreference?) for images (logos, etc.) create fhir-attachment component make end point to reload a remote config file (Parameters) Notes Search bundles can be filtered with the same constraints as the resource by making it be on entry.where(resource.CONSTRAINT) and replacing entry with the results entry.where(resource.name.where(family = 'Duncan')) select(entry.where(resource.name.where(family = 'Duncan')))","title":"ToDo"},{"location":"dev/todo/#todo","text":"Create tests for fhirAxios:lookup and route/fhir CodeSystem/$lookup setup reference lookup to be configurable (in fhir-reference.vue, hard coded to name) Create audit module and tests Save audit messages for activity login/logout save/update resource Internationalization add additional fields to resource display defaultValue[x] fixed[x] pattern[x] minValue[x] maxValue[x] constraint add mixin for fhir elements in frontend add tests for frontend change coding valueset lookup to search based on URL instead of by ID fix valueset expansion lookup to work better on edge cases cache valuesets in $store object instead of hitting them all the time fix issue with valuesets selecting first item autocomplete? questionnaire data entry add form validation and required fields add required fields allow readonly fields (like code for codesystem edit, but not add) change $short-name operation to allow searches and results of the shortname and update fhir-reference component to use that set up all components to work like fhir-reference for presets (disable element on add page when preset) set up \"static\" FHIR resource (documentreference?) for images (logos, etc.) create fhir-attachment component make end point to reload a remote config file (Parameters)","title":"ToDo"},{"location":"dev/todo/#notes","text":"Search bundles can be filtered with the same constraints as the resource by making it be on entry.where(resource.CONSTRAINT) and replacing entry with the results entry.where(resource.name.where(family = 'Duncan')) select(entry.where(resource.name.where(family = 'Duncan')))","title":"Notes"}]}